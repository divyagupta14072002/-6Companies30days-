class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n=grid.size();
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>>pq;
        pq.push({grid[0][0],{0,0}});
        vector<vector<int>>vis(n,vector<int>(n,0));
        int di[]={-1,0,1,0};
        int dj[]={0,1,0,-1};
        int ans=0;
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int height=it.first;
            int row=it.second.first,col=it.second.second;
            if(row==n-1 && col==n-1){
                ans=height;
                break;
            }
            for(int i=0;i<4;i++){
                int nr=row+di[i];
                int nc=col+dj[i];
                if(nr>=0 && nr<n && nc>=0 && nc<n && vis[nr][nc]==0){
                    vis[nr][nc]=1;
                    pq.push({max(height,grid[nr][nc]),{nr,nc}});
                }
            }
        }
        return ans;
    }
};
