class Solution {
public:
    int solve(int src,vector<pair<int,int>>adj[],int n,int x){
        vector<int>dist(n,INT_MAX);
        dist[src]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,src});
        while(!pq.empty()){
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int adjNode=it.first;
                int wt=it.second;
                if(dist[node]!=INT_MAX && dis+wt<dist[adjNode]){
                    dist[adjNode]=dis+wt;
                    pq.push({dis+wt,adjNode});
                }
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(i==src) continue;
            if(dist[i]<=x) ans++;
        }
        return ans;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<pair<int,int>>adj[n];
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        int ans,city;
        for(int i=0;i<n;i++){
            if(i==0){
                city=0;
                ans=solve(i,adj,n,distanceThreshold);
            }
            else{
                int res=solve(i,adj,n,distanceThreshold);
                if(res<ans){
                    ans=res;
                    city=i;
                }
                else if(res==ans) city=max(city,i);
            }
        }
        return city;
    }
};
