class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        vector<int>dist(n,INT_MAX);
        dist[src]=0;
        while(!q.empty()){
            auto node=q.front();
            q.pop();
            int stops=node.first;
            int temp=node.second.first,cost=node.second.second;
            if(stops>k) continue;
            for(auto it:adj[temp]){
                int adjNode=it.first;
                int weight=it.second;
                if(cost+weight<dist[adjNode] && stops<=k){
                    dist[adjNode]=cost+weight;
                    q.push({stops+1,{adjNode,cost+weight}});
                }
            }
        }
        if(dist[dst]==INT_MAX) return -1;
        return dist[dst];
    }
};
