class Solution {
public:
    int solve(int i,int j,vector<vector<int>> &grid, vector<vector<int>> &dp)
    {
        int n=grid.size();
        int m=grid[0].size();
        if(i==n || j==m) return 1e9;
        if(i==n-1 && j==m-1){
            if(grid[i][j]<=0) return 1-grid[i][j];
            else return 1;
        }
        if(dp[i][j]!=1e9) return dp[i][j];
        int down=solve(i+1,j,grid,dp);
        int right=solve(i,j+1,grid,dp);
        int mini=min(down,right)-grid[i][j];
        if(mini<=0) return dp[i][j]=1;
        return dp[i][j]=mini;
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size();
        int m = dungeon[0].size();
        vector<vector<int>> dp(n , vector<int>(m , 1e9));
        return solve(0,0,dungeon, dp);  
    }
};
