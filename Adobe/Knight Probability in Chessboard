class Solution {
public:
    double solve(int n,int k,int row,int col,int di[],int dj[],
    vector<vector<vector<double>>>&dp){
        if(row<0 || row>=n || col<0 || col>=n) return 0;
        if(k==0) return 1.0;
        if(dp[row][col][k]!=-1) return dp[row][col][k];
        double ans=0;
        for(int i=0;i<8;i++){
            int nr=row+di[i];
            int nc=col+dj[i];
            ans+=0.125*solve(n,k-1,nr,nc,di,dj,dp);
        }
        return dp[row][col][k]=ans;
    }
    double knightProbability(int n, int k, int row, int column) {
        if(k==0) return (double)1;
        int di[]={-2,-1,1,2,2,1,-1,-2};
        int dj[]={1,2,2,1,-1,-2,-2,-1};
        vector<vector<vector<double>>>dp(n,vector<vector<double>>(n,vector<double>(k+1,-1)));
        return solve(n,k,row,column,di,dj,dp);
    }
};
